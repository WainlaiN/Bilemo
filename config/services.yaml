# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # user POST custom paramConverter
    App\Request\ParamConverter\User\PostUserConverter:
        tags:
            - { name : 'request.param_converter', converter: 'user_post' }

    # user GET custom paramConverter
    App\Request\ParamConverter\User\GetUserConverter:
        tags:
            - { name: 'request.param_converter', converter: 'user_get' }

    # product GET custom paramConverter
    App\Request\ParamConverter\Product\GetProductConverter:
        tags:
            - { name: 'request.param_converter', converter: 'product_get' }

    # EventListener for HTTPException
    App\EventListener\ExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }

    # add service to manage cache
    App\Service\CacheContent:

    # add service to serialize with Relation for Hypermedia
    App\Service\HateoasService:

    # add service to paginate query
    PaginatorService:
        class: App\Service\PaginatorService
        arguments: [ '@doctrine.services.paginator' ]

    doctrine.services.paginator:
        class: Doctrine\ORM\Tools\Pagination\Paginator
        public: false





